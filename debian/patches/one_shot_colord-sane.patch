commit 1ae074be7a19348d9ac5d74701e1544f1b027456
Author: Christopher James Halse Rogers <raof@ubuntu.com>
Date:   Tue Oct 9 15:55:23 2012 +1100

    Rebuild colord-sane to be one-shot

Index: colord/contrib/colord-sane/cd-main.c
===================================================================
--- colord.orig/contrib/colord-sane/cd-main.c	2012-10-10 14:23:57.743496083 +1100
+++ colord/contrib/colord-sane/cd-main.c	2012-10-10 14:23:57.795496081 +1100
@@ -30,17 +30,12 @@
 
 #include "cd-client.h"
 #include "cd-device.h"
+#include "cd-device-sync.h"
 
 typedef struct {
 	CdClient	*client;
-	gboolean	 doing_refresh;
-	gboolean	 init_sane;
-	GDBusNodeInfo	*introspection;
 	GMainLoop	*loop;
 	GPtrArray	*array; /* of CdMainDev's */
-	GUdevClient	*gudev_client;
-	guint		 owner_id;
-	guint		 timer_id;
 } CdMainPrivate;
 
 typedef struct {
@@ -49,11 +44,8 @@
 	gboolean	 valid;
 } CdMainDev;
 
-#define COLORD_SANE_DBUS_SERVICE	"org.freedesktop.colord-sane"
-#define COLORD_SANE_DBUS_PATH		"/org/freedesktop/colord_sane"
-#define COLORD_SANE_DBUS_INTERFACE	"org.freedesktop.colord.sane"
-
-#define COLORD_SANE_UEVENT_DELAY	2 /* seconds */
+#define COLORD_SANE_CREATOR_PROP	"Created-By"
+#define COLORD_SANE_CREATOR_VAL		"colord-sane"
 
 /**
  * cd_main_dev_free:
@@ -67,24 +59,6 @@
 }
 
 /**
- * cd_main_dev_set_invalid:
- **/
-static void
-cd_main_dev_set_invalid (CdMainPrivate *priv)
-{
-	CdMainDev *tmp;
-	guint i;
-
-	/* nothing to set */
-	if (priv->array->len == 0)
-		return;
-	for (i = 0; i < priv->array->len; i++) {
-		tmp = g_ptr_array_index (priv->array, i);
-		tmp->valid = FALSE;
-	}
-}
-
-/**
  * cd_main_dev_find_by_id:
  **/
 static CdMainDev *
@@ -132,9 +106,6 @@
 {
 	CdClient *client = CD_CLIENT (source_object);
 	CdDevice *device;
-	CdMainCreateDeviceHelper *helper = (CdMainCreateDeviceHelper *) user_data;
-	CdMainDev *dev;
-	CdMainPrivate *priv = helper->priv;
 	GError *error = NULL;
 
 	/* get result */
@@ -143,16 +114,8 @@
 		g_warning ("failed to create device: %s",
 			   error->message);
 		g_error_free (error);
-		goto out;
 	}
-	g_debug ("Added device: %s", cd_device_get_object_path (device));
-	dev = g_new (CdMainDev, 1);
-	dev->id = g_strdup (helper->id);
-	dev->device = g_object_ref (device);
-	g_ptr_array_add (priv->array, dev);
-out:
-	g_free (helper->id);
-	g_free (helper);
+
 	if (device != NULL)
 		g_object_unref (device);
 }
@@ -163,11 +126,10 @@
 static void
 cd_sane_client_add (CdMainPrivate *priv, const SANE_Device *sane_device)
 {
-	CdMainCreateDeviceHelper *helper = NULL;
-	CdMainDev *dev;
 	gchar *id = NULL;
 	gchar *model = NULL;
 	gchar *vendor = NULL;
+	CdMainDev *dev;
 	GHashTable *properties = NULL;
 
 	/* ignore noname, no support devices */
@@ -214,16 +176,16 @@
 	g_hash_table_insert (properties,
 			     (gpointer) CD_DEVICE_PROPERTY_SERIAL,
 			     (gpointer) sane_device->name);
-	helper = g_new0 (CdMainCreateDeviceHelper, 1);
-	helper->priv = priv;
-	helper->id = g_strdup (id);
+	g_hash_table_insert (properties,
+			     (gpointer) COLORD_SANE_CREATOR_PROP,
+			     (gpointer) COLORD_SANE_CREATOR_VAL);
 	cd_client_create_device (priv->client,
 				 id,
-				 CD_OBJECT_SCOPE_TEMP,
+				 CD_OBJECT_SCOPE_NORMAL,
 				 properties,
 				 NULL,
 				 cd_main_colord_create_device_cb,
-				 helper);
+				 NULL);
 out:
 	if (properties != NULL)
 		g_hash_table_unref (properties);
@@ -279,26 +241,12 @@
 	guint i;
 	SANE_Status status;
 
-	/* don't be re-entrant */
-	if (priv->doing_refresh)
-		return;
-	priv->doing_refresh = TRUE;
-
-	/* force sane to drop it's cache of devices -- yes, it is that crap */
-	if (priv->init_sane) {
-		sane_exit ();
-		priv->init_sane = FALSE;
-	}
 	status = sane_init (NULL, NULL);
 	if (status != SANE_STATUS_GOOD) {
 		g_warning ("failed to init SANE: %s",
 			   sane_strstatus (status));
 		goto out;
 	}
-	priv->init_sane = TRUE;
-
-	/* invalidate all devices */
-	cd_main_dev_set_invalid (priv);
 
 	/* get scanners on the local server */
 	status = sane_get_devices (&device_list, TRUE);
@@ -323,103 +271,63 @@
 			continue;
 		cd_sane_client_remove (priv, tmp->device);
 	}
-out:
-	priv->doing_refresh = FALSE;
-}
-
-/**
- * cd_sane_client_refresh_cb:
- **/
-static gboolean
-cd_sane_client_refresh_cb (gpointer user_data)
-{
-	CdMainPrivate *priv = (CdMainPrivate *) user_data;
-	g_debug ("Refreshing scanner devices...");
-	cd_sane_client_refresh (priv);
-	priv->timer_id = 0;
-	return FALSE;
+ out:
+	g_main_loop_quit (priv->loop);
 }
 
-/**
- * cd_sane_client_refresh_schedule:
- **/
 static void
-cd_sane_client_refresh_schedule (CdMainPrivate *priv)
+cd_sane_add_device_if_from_colord_sane(gpointer data,
+				       gpointer user_data)
 {
-	if (priv->timer_id != 0)
-		g_source_remove (priv->timer_id);
-	priv->timer_id = g_timeout_add_seconds (COLORD_SANE_UEVENT_DELAY,
-						cd_sane_client_refresh_cb,
-						priv);
-}
+	CdDevice *device = (CdDevice *)data;
+	CdMainPrivate *priv = (CdMainPrivate *)user_data;
+	GError *error = NULL;
+	
+	cd_device_connect_sync (device, NULL, &error);
 
-/**
- * cd_main_daemon_method_call:
- **/
-static void
-cd_main_daemon_method_call (GDBusConnection *connection_, const gchar *sender,
-			    const gchar *object_path, const gchar *interface_name,
-			    const gchar *method_name, GVariant *parameters,
-			    GDBusMethodInvocation *invocation, gpointer user_data)
-{
-	CdMainPrivate *priv = (CdMainPrivate *) user_data;
+	if (error != NULL) {
+		g_warning ("failed to receive list of devices: %s",
+			   error->message);
+		g_error_free (error);
+		return;
+	}	
 
-	/* return '' */
-	if (g_strcmp0 (method_name, "Refresh") == 0) {
-		g_debug ("CdMain: %s:Refresh()", sender);
-		cd_sane_client_refresh_schedule (priv);
-		g_dbus_method_invocation_return_value (invocation, NULL);
-		goto out;
-	}
-out:
-	return;
+	if (g_strcmp0 (cd_device_get_metadata_item (device,
+						    COLORD_SANE_CREATOR_PROP),
+		       COLORD_SANE_CREATOR_VAL) == 0) {
+		CdMainDev *sane_device = g_new (CdMainDev, 1);
+		sane_device->device = g_object_ref (device);
+		sane_device->id = (gchar *)cd_device_get_id (device);
+		sane_device->valid = FALSE;
+		g_ptr_array_add (priv->array, sane_device);
+	}						    
 }
 
 /**
- * cd_main_daemon_get_property:
+ * cd_sane_client_populate_existing_devices
  **/
-static GVariant *
-cd_main_daemon_get_property (GDBusConnection *connection_, const gchar *sender,
-			     const gchar *object_path, const gchar *interface_name,
-			     const gchar *property_name, GError **error,
-			     gpointer user_data)
+static void
+cd_sane_populate_existing_devices(GObject *source_object,
+				  GAsyncResult *res,
+				  gpointer user_data)
 {
-	GVariant *retval = NULL;
-
-	if (g_strcmp0 (property_name, "DaemonVersion") == 0) {
-		retval = g_variant_new_string (VERSION);
-	} else {
-		g_critical ("failed to get property %s",
-			    property_name);
+	CdMainPrivate *priv = (CdMainPrivate *) user_data;
+	GPtrArray *devices;
+	GError *error = NULL;
+	
+	devices = cd_client_get_devices_by_kind_finish (priv->client, res, &error);
+	if (error != NULL) {
+		g_warning ("failed to receive list of devices: %s",
+			   error->message);
+		g_error_free (error);
+		return;
 	}
 
-	return retval;
-}
+	g_ptr_array_foreach (devices,
+			     cd_sane_add_device_if_from_colord_sane,
+			     priv);
 
-/**
- * cd_main_on_bus_acquired_cb:
- **/
-static void
-cd_main_on_bus_acquired_cb (GDBusConnection *connection_,
-			    const gchar *name,
-			    gpointer user_data)
-{
-	CdMainPrivate *priv = (CdMainPrivate *) user_data;
-	guint registration_id;
-	static const GDBusInterfaceVTable interface_vtable = {
-		cd_main_daemon_method_call,
-		cd_main_daemon_get_property,
-		NULL
-	};
-
-	registration_id = g_dbus_connection_register_object (connection_,
-							     COLORD_SANE_DBUS_PATH,
-							     priv->introspection->interfaces[0],
-							     &interface_vtable,
-							     priv,  /* user_data */
-							     NULL,  /* user_data_free_func */
-							     NULL); /* GError** */
-	g_assert (registration_id > 0);
+	cd_sane_client_refresh (priv);
 }
 
 /**
@@ -440,108 +348,14 @@
 		g_warning ("failed to connect to colord: %s",
 			   error->message);
 		g_error_free (error);
-		goto out;
-	}
-
-	/* refresh */
-	cd_sane_client_refresh (priv);
-out:
-	return;
-}
-
-/**
- * cd_main_udev_uevent_cb:
- **/
-static void
-cd_main_udev_uevent_cb (GUdevClient *gudev_client,
-			const gchar *action,
-			GUdevDevice *udev_device,
-			CdMainPrivate *priv)
-{
-	/* add or remove */
-	if (g_strcmp0 (action, "add") == 0 ||
-	    g_strcmp0 (action, "remove") == 0) {
-		cd_sane_client_refresh_schedule (priv);
+		return;
 	}
-}
-
-/**
- * cd_main_on_name_acquired_cb:
- **/
-static void
-cd_main_on_name_acquired_cb (GDBusConnection *connection_,
-			     const gchar *name,
-			     gpointer user_data)
-{
-	CdMainPrivate *priv = (CdMainPrivate *) user_data;
-	const gchar *subsystems[] = {"usb", NULL};
 
-	g_debug ("CdMain: acquired name: %s", name);
-
-	/* setup */
-	priv->array = g_ptr_array_new_with_free_func ((GDestroyNotify) cd_main_dev_free);
-	priv->client = cd_client_new ();
-	priv->gudev_client = g_udev_client_new (subsystems);
-	g_signal_connect (priv->gudev_client, "uevent",
-			  G_CALLBACK (cd_main_udev_uevent_cb), priv);
-
-	/* connect to daemon */
-	cd_client_connect (priv->client,
-			   NULL,
-			   cd_main_colord_connect_cb,
-			   priv);
-}
-
-/**
- * cd_main_on_name_lost_cb:
- **/
-static void
-cd_main_on_name_lost_cb (GDBusConnection *connection_,
-			 const gchar *name,
-			 gpointer user_data)
-{
-	CdMainPrivate *priv = (CdMainPrivate *) user_data;
-	g_debug ("CdMain: lost name: %s", name);
-	g_main_loop_quit (priv->loop);
-}
-
-/**
- * cd_main_timed_exit_cb:
- **/
-static gboolean
-cd_main_timed_exit_cb (gpointer user_data)
-{
-	CdMainPrivate *priv = (CdMainPrivate *) user_data;
-	g_main_loop_quit (priv->loop);
-	return FALSE;
-}
-
-/**
- * cd_main_load_introspection:
- **/
-static GDBusNodeInfo *
-cd_main_load_introspection (const gchar *filename, GError **error)
-{
-	gboolean ret;
-	gchar *data = NULL;
-	GDBusNodeInfo *info = NULL;
-	GFile *file;
-
-	/* load file */
-	file = g_file_new_for_path (filename);
-	ret = g_file_load_contents (file, NULL, &data,
-				    NULL, NULL, error);
-	if (!ret)
-		goto out;
-
-	/* build introspection from XML */
-	info = g_dbus_node_info_new_for_xml (data, error);
-	if (info == NULL)
-		goto out;
-out:
-	g_object_unref (file);
-	g_free (data);
-	return info;
+	cd_client_get_devices_by_kind(priv->client,
+				      CD_DEVICE_KIND_SCANNER,
+				      NULL,
+				      cd_sane_populate_existing_devices,
+				      priv);
 }
 
 /**
@@ -551,89 +365,34 @@
 main (int argc, char *argv[])
 {
 	CdMainPrivate *priv = NULL;
-	gboolean immediate_exit = FALSE;
-	gboolean timed_exit = FALSE;
-	GError *error = NULL;
-	GOptionContext *context;
 	guint retval = 1;
-	const GOptionEntry options[] = {
-		{ "timed-exit", '\0', 0, G_OPTION_ARG_NONE, &timed_exit,
-		  /* TRANSLATORS: exit after we've started up, used for user profiling */
-		  _("Exit after a small delay"), NULL },
-		{ "immediate-exit", '\0', 0, G_OPTION_ARG_NONE, &immediate_exit,
-		  /* TRANSLATORS: exit straight away, used for automatic profiling */
-		  _("Exit after the engine has loaded"), NULL },
-		{ NULL}
-	};
-
-	setlocale (LC_ALL, "");
-
-	bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
-	bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
-	textdomain (GETTEXT_PACKAGE);
 
 	dbus_threads_init_default ();
 	g_type_init ();
 
-	/* TRANSLATORS: program name */
-	g_set_application_name (_("Color Management (SANE helper)"));
-	context = g_option_context_new (NULL);
-	g_option_context_add_main_entries (context, options, NULL);
-	g_option_context_set_summary (context, _("Color Management D-Bus Service (SANE)"));
-	g_option_context_parse (context, &argc, &argv, NULL);
-	g_option_context_free (context);
-
 	/* create new objects */
 	priv = g_new0 (CdMainPrivate, 1);
 	priv->loop = g_main_loop_new (NULL, FALSE);
+	priv->client = cd_client_new ();
+	priv->array = g_ptr_array_new_with_free_func ((GDestroyNotify) cd_main_dev_free);
 
-	/* load introspection from file */
-	priv->introspection = cd_main_load_introspection (DATADIR "/dbus-1/interfaces/"
-							  COLORD_SANE_DBUS_INTERFACE ".xml",
-							  &error);
-	if (priv->introspection == NULL) {
-		g_warning ("CdMain: failed to load introspection: %s",
-			   error->message);
-		g_error_free (error);
-		goto out;
-	}
-
-	/* own the object */
-	priv->owner_id = g_bus_own_name (G_BUS_TYPE_SYSTEM,
-					 COLORD_SANE_DBUS_SERVICE,
-					 G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT |
-					 G_BUS_NAME_OWNER_FLAGS_REPLACE,
-					 cd_main_on_bus_acquired_cb,
-					 cd_main_on_name_acquired_cb,
-					 cd_main_on_name_lost_cb,
-					 priv, NULL);
-
-	/* Only timeout and close the mainloop if we have specified it
-	 * on the command line */
-	if (immediate_exit)
-		g_idle_add (cd_main_timed_exit_cb, priv);
-	else if (timed_exit)
-		g_timeout_add_seconds (5, cd_main_timed_exit_cb, priv);
+	/* connect to daemon */
+	cd_client_connect (priv->client,
+			   NULL,
+			   cd_main_colord_connect_cb,
+			   priv);
 
-	/* wait */
+	/* process */
 	g_main_loop_run (priv->loop);
 
 	/* success */
 	retval = 0;
-out:
+
 	if (priv != NULL) {
-		if (priv->init_sane)
-			sane_exit ();
 		if (priv->array != NULL)
 			g_ptr_array_unref (priv->array);
-		if (priv->owner_id > 0)
-			g_bus_unown_name (priv->owner_id);
 		if (priv->client != NULL)
 			g_object_unref (priv->client);
-		if (priv->gudev_client != NULL)
-			g_object_unref (priv->gudev_client);
-		if (priv->introspection != NULL)
-			g_dbus_node_info_unref (priv->introspection);
 		g_main_loop_unref (priv->loop);
 	}
 	return retval;
Index: colord/src/cd-main.c
===================================================================
--- colord.orig/src/cd-main.c	2012-10-10 12:16:50.024652929 +1100
+++ colord/src/cd-main.c	2012-10-10 14:25:28.511491236 +1100
@@ -1559,30 +1559,6 @@
 	g_strfreev (spaces);
 }
 
-/**
- * cd_main_colord_sane_refresh_cb:
- **/
-static void
-cd_main_colord_sane_refresh_cb (GObject *source_object,
-				GAsyncResult *res,
-				gpointer user_data)
-{
-	GError *error = NULL;
-	GVariant *retval;
-
-	retval = g_dbus_connection_call_finish (connection,
-						res,
-						&error);
-	if (retval == NULL) {
-		g_warning ("failed to contact colord-sane: %s",
-			   error->message);
-		g_error_free (error);
-		goto out;
-	}
-out:
-	if (retval != NULL)
-		g_variant_unref (retval);
-}
 
 /**
  * cd_main_on_name_acquired_cb:
@@ -1656,22 +1632,6 @@
 		}
 	}
 
-	/* add SANE devices */
-	ret = cd_config_get_boolean (config, "UseSANE");
-	if (ret) {
-		g_dbus_connection_call (connection,
-					"org.freedesktop.colord-sane",
-					"/org/freedesktop/colord_sane",
-					"org.freedesktop.colord.sane",
-					"Refresh",
-					NULL,
-					NULL,
-					G_DBUS_CALL_FLAGS_NONE,
-					-1,
-					NULL,
-					cd_main_colord_sane_refresh_cb,
-					NULL);
-	}
 
 	/* now we've got the profiles, setup the overrides */
 	cd_main_setup_standard_spaces ();
@@ -1865,7 +1825,7 @@
 						 g_free,
 						 (GDestroyNotify) g_object_unref);
 #ifdef HAVE_GUDEV
-	udev_client = cd_udev_client_new ();
+	udev_client = cd_udev_client_new (cd_config_get_boolean (config, "UseSANE"));
 	g_signal_connect (udev_client, "device-added",
 			  G_CALLBACK (cd_main_client_device_added_cb),
 			  NULL);
Index: colord/src/cd-udev-client.c
===================================================================
--- colord.orig/src/cd-udev-client.c	2012-10-10 12:16:50.024652929 +1100
+++ colord/src/cd-udev-client.c	2012-10-10 14:27:04.527486112 +1100
@@ -38,6 +38,8 @@
 {
 	GUdevClient			*gudev_client;
 	GPtrArray			*array_devices;
+	gboolean			use_sane;
+	gboolean			sane_in_progress;
 };
 
 enum {
@@ -199,6 +201,59 @@
 }
 
 /**
+ * cd_udev_client_colord_sane_finished_cb
+ */
+static void
+cd_udev_client_colord_sane_finished_cb(GPid pid,
+				       gint status,
+				       gpointer user_data)
+{
+	CdUdevClientPrivate *priv = (CdUdevClientPrivate *)user_data;
+
+	priv->sane_in_progress = FALSE;
+	g_spawn_close_pid (pid);
+}
+
+/**
+ * cd_udev_client_probe_sane_devices
+ */
+
+static void
+cd_udev_client_probe_sane_devices(CdUdevClientPrivate *priv)
+{
+	gchar *argv[2];
+	GError *error = NULL;
+	GPid colord_sane_pid;
+
+	argv[0] = (gchar *)COLORD_SANE_BINARY;
+	argv[1] = NULL;
+
+	if (priv->sane_in_progress || !priv->use_sane)
+		return;
+	
+	g_spawn_async (NULL,
+		       argv,
+		       NULL,
+		       G_SPAWN_DO_NOT_REAP_CHILD,
+		       NULL,
+		       NULL,
+		       &colord_sane_pid,
+		       &error);
+
+	if (error != NULL) {
+		g_warning ("CdUdevClient: failed to spawn colord-sane helper: %s",
+			   error->message);
+		g_error_free (error);
+		return;
+	}
+
+	priv->sane_in_progress = TRUE;
+	g_child_watch_add (colord_sane_pid,
+			   cd_udev_client_colord_sane_finished_cb,
+			   priv);
+}
+
+/**
  * cd_udev_client_uevent_cb:
  **/
 static void
@@ -219,6 +274,8 @@
 						      udev_device);
 			goto out;
 		}
+		/* Not native device, reprobe SANE */
+		cd_udev_client_probe_sane_devices(udev_client->priv);
 		goto out;
 	}
 
@@ -232,6 +289,8 @@
 						   udev_device);
 			goto out;
 		}
+		/* Not native device, reprobe SANE */
+		cd_udev_client_probe_sane_devices(udev_client->priv);
 		goto out;
 	}
 out:
@@ -270,6 +329,10 @@
 		if (ret)
 			cd_udev_client_add (udev_client, udev_device);
 	}
+
+	/* probe sane devices */
+	cd_udev_client_probe_sane_devices(udev_client->priv);
+
 	g_list_foreach (devices, (GFunc) g_object_unref, NULL);
 	g_list_free (devices);
 }
@@ -331,10 +394,11 @@
  * cd_udev_client_new:
  **/
 CdUdevClient *
-cd_udev_client_new (void)
+cd_udev_client_new (gboolean use_sane)
 {
 	CdUdevClient *udev_client;
 	udev_client = g_object_new (CD_TYPE_UDEV_CLIENT, NULL);
+	udev_client->priv->use_sane = use_sane;
 	return CD_UDEV_CLIENT (udev_client);
 }
 
Index: colord/src/Makefile.am
===================================================================
--- colord.orig/src/Makefile.am	2012-10-10 12:16:50.024652929 +1100
+++ colord/src/Makefile.am	2012-10-10 14:23:57.799496080 +1100
@@ -26,7 +26,8 @@
 	-DCD_COMPILATION				\
 	-DG_UDEV_API_IS_SUBJECT_TO_CHANGE		\
 	-DCD_SYSTEM_PROFILES_DIR="\"$(CD_SYSTEM_PROFILES_DIR)"\" \
-	-DLOCALEDIR=\""$(localedir)"\"
+	-DLOCALEDIR=\""$(localedir)"\"			\
+	-DCOLORD_SANE_BINARY=\"$(libexecdir)/colord-sane\"
 
 COLORD_LIBS =						\
 	$(top_builddir)/libcolord/libcolord.la

--- colord-0.1.21.orig/src/cd-udev-client.h
+++ colord-0.1.21/src/cd-udev-client.h
@@ -56,7 +56,7 @@ struct _CdUdevClientClass
 };
 
 GType		 cd_udev_client_get_type	(void);
-CdUdevClient	*cd_udev_client_new		(void);
+CdUdevClient	*cd_udev_client_new		(gboolean use_sane);
 void		 cd_udev_client_coldplug	(CdUdevClient	*udev_client);
 
 G_END_DECLS
